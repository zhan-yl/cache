/*
	创建一个线程安全的LRU处理机制

	LRU处理

	思路:
		使用list加map实现LRU cache, map用于数据的快速检索及存储，list则用于LRU优先权的控制

		具体为:
			写入时,先从map中查询,如果能查询到值,则将该值的在List中移动到最前面. 同时hit加一。如果查询不到值,则判断当前map是否到达最大值,如果到达最大值则移除List最后面的值(swap),同时删除map中的值,如果map容量未达最大值,则写入map,同时将值放在List最前面.
			读取时,从map中查询,如果能查询到值,同时hit加一。则直接将List中该值移动到最前面,返回查询结果.
			为保证并发安全,需要引入读写锁.
			另外,存在读取List中内容反查map的情况,因为声明一个容器对象同时保存key以及value, List中以及map中存储的都是容器对象的引用.
			引入原子对象对命中数以及未命中数等指标进行统计

*/
package cache
